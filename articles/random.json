{"randomArticles":[{"articleTitle":"springmvc-02-hellomvc 什么是SpringMVC","articleAbstractText":"1、什么是SpringMVC 1.1、概述  =Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。= 查看官方文档：https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web 我们为什么要学习SpringMVC呢? Spring MVC的特点：  轻量级，简单易学 高效 , 基于请求响应的MVC框架 与Spring兼容性好，无缝结合 约定优于配置 功能强大：RESTful、数据验证、格式化、本地化、主题等 简洁灵活  Spring的web框架围绕DispatcherServlet [ 调度Servlet ] 设计。 DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁； 正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和A....","articleStatus":0,"articlePermalink":"/articles/2019/09/05/1607179839767.html","articleImg1URL":"https://b3logfile.com/file/2020/12/solofetchupload6437980859011167066-3b81fa46.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"pmp-07-项目成本管理","articleAbstractText":"项目成本管理  生命周期成本  项目建设期的建设成本项目产品运行期的运营和维护成本、项目产品报废时的处置成本   成本分类   沉没成本 Sunk Cost  已花费的成本，中止项目时不应考虑    直接成本 Direct Cost  项目中专用的成本，如项目所使用的设备费、材料费、薪资、差旅费、训练费等    间接成本 Indirent Cost  可以多项目间分摊的成本，如办公室租金、水电费、清洁费、员工保险及福利等    固定成本 Fixed Cost  无论生产/销售都不变的成本；如租金、薪资、设备折旧等    变动成本 Variable Cost  依生产/销售而变动的成本；如材料费、加班费等    机会成本  选择一个项目而放弃另一个项目之间的成本差     挣得进度 (ES)  挣得进度理论用 ES 和实际时间 (AT) 替代了传统 EVM 所使用的进度偏差测量指标（挣值 \u2013 计划价值）， 使用这种替代方法计算进度偏差 ES - AT，如果挣得进度大于 0，则表示项目进度提前了 进度绩效指数 (SPI) 为 ES 与 AT 之比，表示完成项目的工作效率 敏捷环境中采用轻量....","articleStatus":0,"articlePermalink":"/articles/2019/12/11/1600674552643.html","articleImg1URL":"https://b3logfile.com/file/2020/09/solofetchupload98887646000495472-a7383fb5.jpeg?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"spring-11-transaction 声明式事务","articleAbstractText":"Spring中的事务管理  声明式事务：AOP  一般情况下比编程式事务好用。 将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。 将事务管理作为横切关注点，通过aop方法模块化。Spring中通过Spring AOP框架支持声明式事务管理   编程式事务：需要在代码中，进行事务的管理  将事务管理代码嵌到业务方法中来控制事务的提交和回滚 缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码   使用Spring管理事务，注意头文件的约束导入 : tx xmlns:tx=\"http://www.springframework.org/schema/tx\" http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\"&gt;   事务管理器  无论使用Spring的哪种事务管理策略（编程式或者声明式）事务管理器都是必须的。 就是 Spring的核心事务管理抽象，管理封装了一组独立于技术的方法。   JDBC事务 &lt;bean id=\"t....","articleStatus":0,"articlePermalink":"/articles/2019/08/03/1606134787265.html","articleImg1URL":"https://b3logfile.com/bing/20190321.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"mybatis-12-动态 SQL","articleAbstractText":"=什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句= 利用动态 SQL 这一特性可以彻底摆脱这种痛苦。  动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。  if choose (when, otherwise) trim (where, set) foreach 搭建环境  CREATE TABLE `blog` (  `id` varchar(50) NOT NULL COMMENT '博客id',  `title` varchar(100) NOT NULL COMMENT '博客标题',  `author` varchar(30) NOT NULL COMMENT '博客作者',  `create_time` datetime NOT NULL COMMENT '创建时间',  `views` int(30) NOT NULL CO....","articleStatus":0,"articlePermalink":"/articles/2019/07/15/1606131957340.html","articleImg1URL":"https://b3logfile.com/file/2020/11/1569979229205-17961593.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"springboot-02-config 配置文件及原理","articleAbstractText":"一.知识点 配置文件 SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的  application.properties  语法结构 ： key=value   application.yml  语法结构 ：key：空格 value    **配置文件的作用 ：修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了； ** YAML YAML是 \"YAML Ain't a Markup Language\" （YAML不是一种置标语言）的递归缩写。 在开发的这种语言时，YAML 的意思其实是：\"Yet Another Markup Language\"（仍是一种置标语言） YAML A Markup Language ：是一个标记语言 YAML isnot Markup Language ：不是一个标记语言 标记语言 以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml yaml配置： server： prot: 8080 xml配置： &lt;server&gt; &lt;port&gt;....","articleStatus":0,"articlePermalink":"/articles/2020/02/18/1607283121892.html","articleImg1URL":"https://b3logfile.com/file/2020/12/solofetchupload3862881748604497236-55b97fed.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}