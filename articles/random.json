{"randomArticles":[{"articleTitle":"redis-05-Hash哈希","articleAbstractText":"hash哈希 # hset、hget 命令用于为哈希表中的字段赋值 。 # hmset、hmget 同时将多个field-value对设置到哈希表中。会覆盖哈希表中已存在的字段。 # hgetall 用于返回哈希表中，所有的字段和值。 # hdel 用于删除哈希表 key 中的一个或多个指定字段 hset myhash field1 \"a\" hget myhash field1 hmset myhash field1 \"hello\" field2 \"world\" hgetall myhash hdel myhash field1 # hlen 获取哈希表中字段的数量。 hlen myhash # hexists 查看哈希表的指定字段是否存在。 hexists myhash field1 #存在返回1 hexists myhash field3 #不存在返回0 # hkeys 获取哈希表中的所有域（field）。 # hvals 返回哈希表所有域(field)的值。 hkeys myhash hvals myhash # hincrby 为哈希表中的字段值加上指定增量值。 hset my....","articleStatus":0,"articlePermalink":"/articles/2019/09/16/1599749076072.html","articleImg1URL":"https://b3logfile.com/bing/20200111.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"spring-03-ioc2 IOC创建对象的方式及Spring配置","articleAbstractText":"1.实体类 public class User { private String name; public User() { System.out.println(\"User的无参构造\"); } public User(String name) { this.name = name; System.out.println(\"User的有参构造\"); } public String getName() { return name; } public void setName(String name) { this.name = name; } public void show(){ System.out.println(\"name=\"+name); } }  2.配置 2.1.使用无参构造创建对象，默认！ &lt;!--无参构造器--&gt; &lt;bean id=\"user\" class=\"com.ceneri.study.pojo.User\"&gt; &lt;property name=\"name\" value=\"狂神\"/&gt; &lt;/bean&gt;  2.2 假设我们要使....","articleStatus":0,"articlePermalink":"/articles/2019/06/05/1599755306182.html","articleImg1URL":"https://b3logfile.com/bing/20180211.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"redis-07-三种特殊数据类","articleAbstractText":"三种特殊数据类  GEO地理位置  Redis 的 GEO 特性在 Redis 3.2 版本中推出， 这个功能可以将用户给定的地理位置信息储存起来， 并对 这些信息进行操作。来实现诸如附近位置、摇一摇这类依赖于地理位置信息的功能。geo的数据类型为 zset。 GEO 的数据结构总共有六个常用命令：geoadd、geopos、geodist、georadius、 georadiusbymember、gethash 官方文档：https://www.redis.net.cn/order/3685.html  HyperLogLog  Redis 在 2.8.9 版本添加了 HyperLogLog 结构。 Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积 非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。 在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。 HyperLogL....","articleStatus":0,"articlePermalink":"/articles/2019/09/18/1599750078455.html","articleImg1URL":"https://b3logfile.com/bing/20200113.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"spring-02-hellospring 初识Spring","articleAbstractText":"1.配置 beans.xml &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\"&gt; &lt;bean id=\"Hello\" class=\"com.ceneri.study.pojo.Hello\"&gt; &lt;property name=\"str\" value=\"Spring\"/&gt; &lt;/bean&gt; &lt;/beans&gt;  2.实体类 public class Hello { private String str; public Strin....","articleStatus":0,"articlePermalink":"/articles/2019/06/05/1599755073687.html","articleImg1URL":"https://b3logfile.com/bing/20190115.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}