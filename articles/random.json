{"randomArticles":[{"articleTitle":"mybatis-12-动态 SQL","articleAbstractText":"=什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句= 利用动态 SQL 这一特性可以彻底摆脱这种痛苦。  动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。  if choose (when, otherwise) trim (where, set) foreach 搭建环境  CREATE TABLE `blog` (  `id` varchar(50) NOT NULL COMMENT '博客id',  `title` varchar(100) NOT NULL COMMENT '博客标题',  `author` varchar(30) NOT NULL COMMENT '博客作者',  `create_time` datetime NOT NULL COMMENT '创建时间',  `views` int(30) NOT NULL CO....","articleStatus":0,"articlePermalink":"/articles/2019/07/15/1606131957340.html","articleImg1URL":"https://b3logfile.com/file/2020/11/1569979229205-17961593.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"spring-06-anno 注解开发","articleAbstractText":"context约束，增加注解的支持！ &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\"&gt; &lt;context:ann....","articleStatus":0,"articlePermalink":"/articles/2019/08/03/1606134613923.html","articleImg1URL":"https://b3logfile.com/bing/20181208.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"springboot-04-data 数据访问","articleAbstractText":"JDBC数据访问  引入模块  2.  项目创建成功之后，会自动配上如下的配置： &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt;   新建一个application.yml配置文件：  spring: datasource: username: root password: 123456 #?serverTimezone=UTC解决时区的报错 url: jdbc:mysql://localho....","articleStatus":0,"articlePermalink":"/articles/2020/02/18/1607365451628.html","articleImg1URL":"https://b3logfile.com/file/2020/12/solofetchupload2951331360451824761-cfa8f19b.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"spring-05-Autowired 自动装配","articleAbstractText":"使用注解实现自动装配  自动装配是Spring满足bean依赖的一种方式 Spring会在上下文自动寻找，并自动给bean装配属性！  在Spring中有三种自动装配的方式  在xml中显示的配置 在java中显示配置 隐式的自动装配bean【重要】  这里我们主要讲第三种：自动化的装配bean。 测试 环境搭建：一个人有两个宠物 ByName自动装配 &lt;bean id=\"cat\" class=\"com.ceneri.study.pojo.Cat\"/&gt; &lt;bean id=\"dog\" class=\"com.ceneri.study.pojo.Dog\"/&gt; &lt;!-- byName:会自动在容器上下文中套接，和自己对象的set方法后面的值相对应的beanid --&gt; &lt;bean id=\"people\" class=\"com.ceneri.study.pojo.People\" autowire=\"byName\"&gt; &lt;property name=\"name\" value=\"狂神\"/&gt; &lt;/bean&gt;  ByType自动装配 ....","articleStatus":0,"articlePermalink":"/articles/2019/08/03/1606134537232.html","articleImg1URL":"https://b3logfile.com/bing/20190120.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"springmvc-03-annotation 注解版","articleAbstractText":"注解版   新建一个Moudle，springmvc-03-hello-annotation 。添加web支持！   由于Maven可能存在资源过滤的问题，我们将配置完善   &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&....","articleStatus":0,"articlePermalink":"/articles/2019/09/05/1607181288295.html","articleImg1URL":"https://b3logfile.com/bing/20181204.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}