{"relevantArticles":[{"articleTitle":"mybatis-13-缓存","articleAbstractText":"13.1、简介  查询 ： 连接数据库 ，耗资源！  一次查询的结果，给他暂存在一个可以直接取到的地方！--&gt; 内存 ： 缓存   我们再次查询相同数据的时候，直接走缓存，就不用走数据库了  什么是缓存 [ Cache ]？  存在内存中的临时数据。 将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。   为什么使用缓存？  减少和数据库的交互次数，减少系统开销，提高系统效率。   什么样的数据能使用缓存？  经常查询并且不经常改变的数据。【可以使用缓存】    13.2、Mybatis缓存  MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。 MyBatis系统中默认定义了两级缓存：一级缓存和二级缓存  默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存） 二级缓存需要手动开启和配置，他是基于namespace级别的缓存。 为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通....","articleStatus":0,"articlePermalink":"/articles/2019/07/15/1606132160312.html","articleImg1URL":"https://b3logfile.com/file/2020/11/1569983650437-4e3747e7.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"mybatis-11-一对多处理","articleAbstractText":"比如：一个老师拥有多个学生！ 对于老师而言，就是一对多的关系! 环境搭建  环境搭建，和刚才一样  实体类  @Data public class Student {   private int id;  private String name;  private int tid;  }   @Data public class Teacher {  private int id;  private String name;   //一个老师拥有多个学生  private List&lt;Student&gt; students; } 按照结果嵌套处理    &lt;!--按结果嵌套查询--&gt;  &lt;select id=\"getTeacher\" resultMap=\"TeacherStudent\"&gt;  select s.id sid, s.name sname, t.name tname,t.id tid  from student s,teacher t  where s.tid = t.id and t.id = #{tid}  &lt;/select&gt;   ....","articleStatus":0,"articlePermalink":"/articles/2019/07/15/1606131875499.html","articleImg1URL":"https://b3logfile.com/bing/20180901.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"mybatis-10-多对一处理","articleAbstractText":"10、多对一处理 多对一：   多个学生，对应一个老师 对于学生这边而言， 关联 .. 多个学生，关联一个老师 【多对一】 对于老师而言， 集合 ， 一个老师，有很多学生 【一对多】   SQL：  CREATE TABLE `teacher` (  `id` INT(10) NOT NULL,  `name` VARCHAR(30) DEFAULT NULL,  PRIMARY KEY (`id`) ) ENGINE=INNODB DEFAULT CHARSET=utf8  INSERT INTO teacher(`id`, `name`) VALUES (1, '秦老师');   CREATE TABLE `student` (  `id` INT(10) NOT NULL,  `name` VARCHAR(30) DEFAULT NULL,  `tid` INT(10) DEFAULT NULL,  PRIMARY KEY (`id`),  KEY `fktid` (`tid`),  CONSTRAINT `fktid` FOREIGN KEY (`tid`) REFERENCE....","articleStatus":0,"articlePermalink":"/articles/2019/07/15/1606131475495.html","articleImg1URL":"https://b3logfile.com/file/2020/11/image-706d5833.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"mybatis-12-动态 SQL","articleAbstractText":"=什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句= 利用动态 SQL 这一特性可以彻底摆脱这种痛苦。  动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。  if choose (when, otherwise) trim (where, set) foreach 搭建环境  CREATE TABLE `blog` (  `id` varchar(50) NOT NULL COMMENT '博客id',  `title` varchar(100) NOT NULL COMMENT '博客标题',  `author` varchar(30) NOT NULL COMMENT '博客作者',  `create_time` datetime NOT NULL COMMENT '创建时间',  `views` int(30) NOT NULL CO....","articleStatus":0,"articlePermalink":"/articles/2019/07/15/1606131957340.html","articleImg1URL":"https://b3logfile.com/file/2020/11/1569979229205-17961593.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"mybatis-09-Lombok","articleAbstractText":"Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java. Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.  java library plugs build tools with one annotation your class  使用步骤：  在IDEA中安装Lombok插件！ 在项目中导入lombok的jar包  &lt;dependency&gt;  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;  &lt;artifactId&gt;lombok&lt;/artifactId&gt;  &lt....","articleStatus":0,"articlePermalink":"/articles/2019/07/15/1606131302043.html","articleImg1URL":"https://b3logfile.com/bing/20171218.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}