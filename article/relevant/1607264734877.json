{"relevantArticles":[{"articleTitle":"ssmbuild-整合SSM","articleAbstractText":"整合SSM 环境要求 环境：  IDEA MySQL 5.7.19 Tomcat 9 Maven 3.6  要求：  需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；  数据库环境 创建一个存放书籍数据的数据库表 CREATE DATABASE `ssmbuild`; USE `ssmbuild`; DROP TABLE IF EXISTS `books`; CREATE TABLE `books` ( `bookID` INT(10) NOT NULL AUTO_INCREMENT COMMENT '书id', `bookName` VARCHAR(100) NOT NULL COMMENT '书名', `bookCounts` INT(11) NOT NULL COMMENT '数量', `detail` VARCHAR(200) NOT NULL COMMENT '描述', KEY `bookID` (`bookID`) ) ENGINE=INNODB DEFAULT CHARSET=utf8 INSERT INTO `books`....","articleStatus":0,"articlePermalink":"/articles/2019/09/05/1607266751298.html","articleImg1URL":"https://b3logfile.com/bing/20190702.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"springmvc-08-file 文件上传和下载","articleAbstractText":"准备工作 文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。 前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器； 对表单中的 enctype 属性做个详细的说明：  application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。 multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。 text/plain：除了把空格转换为 \"+\" 号外，其他字符都不做编码处理，这种方式适用直....","articleStatus":0,"articlePermalink":"/articles/2019/09/05/1607265054517.html","articleImg1URL":"https://b3logfile.com/bing/20200514.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"springmvc-06-ajax ajax详解","articleAbstractText":"jQuery.ajax jQuery.ajax(...) 部分参数： url：请求地址 type：请求方式，GET、POST（1.9.0之后用method） headers：请求头 data：要发送的数据 contentType：即将发送信息至服务器的内容编码类型(默认: \"application/x-www-form-urlencoded; charset=UTF-8\") async：是否异步 timeout：设置请求超时时间（毫秒） beforeSend：发送请求前执行的函数(全局) complete：完成之后执行的回调函数(全局) success：成功之后执行的回调函数(全局) error：失败之后执行的回调函数(全局) accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型 dataType：将服务器端返回的数据转换成指定类型 \"xml\": 将服务器端返回的内容转换成xml格式 \"text\": 将服务器端返回的内容转换成普通文本格式 \"html\": 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。....","articleStatus":0,"articlePermalink":"/articles/2019/09/05/1607264164528.html","articleImg1URL":"https://b3logfile.com/bing/20200416.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"springmvc-05-json Json交互处理","articleAbstractText":"什么是JSON？   JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。 采用完全独立于编程语言的文本格式来存储和表示数据。 简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。  在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：  对象表示为键值对，数据由逗号分隔 花括号保存对象 方括号保存数组  JSON 键值对是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 \"\" 包裹，使用冒号 : 分隔，然后紧接着值： {\"name\": \"QinJiang\"} {\"age\": \"3\"} {\"sex\": \"男\"}  很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解： JS....","articleStatus":0,"articlePermalink":"/articles/2019/09/05/1607262527551.html","articleImg1URL":"https://b3logfile.com/bing/20201117.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}