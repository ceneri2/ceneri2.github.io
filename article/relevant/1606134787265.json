{"relevantArticles":[{"articleTitle":"spring-10-mybatis Mybatis-Spring","articleAbstractText":"回忆mybatis  编写实体类 package com.ceneri.study.pojo; public class User { private int id; private String name; private String pwd; }   编写核心配置文件 &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt; &lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=\"com.ceneri.study.pojo\"/&gt; &lt;/typeAliases&gt; &lt;environments default=\"development\"&gt; &lt;environment id=\"development\"&gt; &lt;tr....","articleStatus":0,"articlePermalink":"/articles/2019/08/03/1606134756145.html","articleImg1URL":"https://b3logfile.com/bing/20180902.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"spring-09-aop 使用Spring实现AOP","articleAbstractText":"【重点】使用AOP织入，需要导入一个依赖包！ &lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;&lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.9.4&lt;/version&gt; &lt;/dependency&gt;  方式一：使用Spring的API接口【主要SpringAPI接口实现】   首先编写我们的业务接口和实现类 public interface UserService { public void add(); public void delete(); public void update(); public void select(); }  public class UserServiceImpl implements UserService{ @Over....","articleStatus":0,"articlePermalink":"/articles/2019/08/03/1606134720532.html","articleImg1URL":"https://b3logfile.com/bing/20200710.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"spring-08-proxy 代理模式","articleAbstractText":"静态代理 角色分析：  抽象角色：一般会使用接口或者抽象类来解决 真实角色：被代理的角色 代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作 客户：访问代理对象的人！  demo01 代码步骤：  接口 public interface Rent { public void rent(); }   真实角色 //房东 public class Host implements Rent { public void rent() { System.out.println(\"房东要出租房子\"); } }   代理角色 public class Proxy implements Rent { private Host host; public Proxy() { } public Proxy(Host host) { this.host = host; } public void rent() { seeHouse(); fare(); contract(); host.rent(); } //看房 public void seeHouse() { System.out.prin....","articleStatus":0,"articlePermalink":"/articles/2019/08/03/1606134686997.html","articleImg1URL":"https://b3logfile.com/bing/20171106.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"spring-07-appconfig 使用java的方式配置spring","articleAbstractText":"使用java的方式配置Spring 我们现在要完全不适用Spring的xml配置了，全权交给java来做 javaConfig是Spring的一个子项目，在Spring4之后，它成为了一个核心功能！ 实体类 //这里这个注解的意思，就是说明这个类被Spring接管了。注解到了容器中 @Component public class User { private String name; public String getName() { return name; } //属性注入值 @Value(\"狂神\") public void setName(String name) { this.name = name; } @Override public String toString() { return \"User{\" + \"name='\" + name + '\\'' + '}'; } }  配置文件 //这个也被Spring容器托管，注册到容器里，因为他本来就是一个@Component， // @Component代表这是一个配置类，就和我们之前看的beans.xml是一样的 @Conf....","articleStatus":0,"articlePermalink":"/articles/2019/08/03/1606134641637.html","articleImg1URL":"https://b3logfile.com/bing/20181113.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}