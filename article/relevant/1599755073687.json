{"relevantArticles":[{"articleTitle":"spring-04-di 注入方式","articleAbstractText":"SET方式注入  依赖注入（Dependency Injection,DI）。  依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 . 注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配 .    【环境搭建】   复杂类型 Address.java public class Address { private String address; public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } @Override public String toString() { return \"Address{\" + \"address='\" + address + '\\'' + '}'; } }    真实测试对象 Student.java public class Student { private String name; private Address address; private S....","articleStatus":0,"articlePermalink":"/articles/2019/06/05/1599755336464.html","articleImg1URL":"https://b3logfile.com/bing/20180401.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"spring-03-ioc2 IOC创建对象的方式及Spring配置","articleAbstractText":"1.实体类 public class User { private String name; public User() { System.out.println(\"User的无参构造\"); } public User(String name) { this.name = name; System.out.println(\"User的有参构造\"); } public String getName() { return name; } public void setName(String name) { this.name = name; } public void show(){ System.out.println(\"name=\"+name); } }  2.配置 2.1.使用无参构造创建对象，默认！ &lt;!--无参构造器--&gt; &lt;bean id=\"user\" class=\"com.ceneri.study.pojo.User\"&gt; &lt;property name=\"name\" value=\"狂神\"/&gt; &lt;/bean&gt;  2.2 假设我们要使....","articleStatus":0,"articlePermalink":"/articles/2019/06/05/1599755306182.html","articleImg1URL":"https://b3logfile.com/bing/20180211.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"spring-01-ioc1 IoC基础","articleAbstractText":"1.UserDao接口 public interface UserDao { void getUser(); }  2.UserDaoImpl实现类 public class UserDaoImpl implements UserDao { public void getUser(){ System.out.println(\"默认获取用户的数据\"); } }  3.UserService业务接口 public interface UserService { void getUser(); }  4.UserServiceImpl业务实现类 public class UserServiceImpl implements UserService { /*private UserDao userDao = new UserDaoOracleImpl();*/ private UserDao userDao; //利用set进行动态实现值的注入 public void setUserDao(UserDao userDao) { this.userDao = userDao; } public ....","articleStatus":0,"articlePermalink":"/articles/2019/06/05/1599754998145.html","articleImg1URL":"https://b3logfile.com/bing/20191108.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}